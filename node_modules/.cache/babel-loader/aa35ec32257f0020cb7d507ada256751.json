{"ast":null,"code":"var _jsxFileName = \"/home/gb/Bureau/soft-serverless-GabrielleWal/Netlify-App/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { Flex, Grid, Input, Text, useToast } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"Ba7btw1yauGPzzf7CIvrz1NcY9WwWGBN\";\nconst GifCard = _ref => {\n  let {\n    URL\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"iframe\", {\n    title: URL,\n    src: URL,\n    allowFullScreen: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 60\n  }, this);\n};\n_c = GifCard;\nconst App = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [gifs, setGifs] = useState([]);\n  const toast = useToast();\n  useEffect(() => {\n    const fetchGiphy = () => {\n      fetch(`https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${input}&limit=9&offset=0&rating=g&lang=en`).then(response => response.json()).then(data => setGifs(data.data)).catch(() => toast({\n        title: 'Please try again',\n        status: 'error',\n        duration: 3000,\n        isClosable: true\n      }));\n    };\n    const timer = setTimeout(() => {\n      fetchGiphy();\n    }, 700);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [input, toast]);\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    direction: \"column\",\n    align: \"center\",\n    w: \"100%\",\n    h: \"100%\",\n    bg: \"black\",\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      mt: \"48px\",\n      bgGradient: \"linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(193,176,15,1) 0%, rgba(0,212,255,1) 100%)\",\n      bgClip: \"text\",\n      fontWeight: \"extrabold\",\n      fontSize: \"32px\",\n      children: \"Serverless Gifs App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      onChange: event => setInput(event.target.value),\n      value: input,\n      mt: \"48px\",\n      w: \"90%\",\n      maxW: \"600px\",\n      color: \"white\",\n      size: \"lg\",\n      focusBorderColor: \"green.300\",\n      placeholder: \"search gifs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      mt: \"80px\",\n      templateColumns: \"repeat(3, 1fr)\",\n      gap: 8,\n      children: gifs.map(gif => /*#__PURE__*/_jsxDEV(GifCard, {\n        URL: gif.embed_url\n      }, gif.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 3\n  }, this);\n};\n_s(App, \"TMA26YOVddnB2QD5igiDGEpKgzk=\", false, function () {\n  return [useToast];\n});\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"GifCard\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["useEffect","useState","Flex","Grid","Input","Text","useToast","API_KEY","GifCard","URL","App","input","setInput","gifs","setGifs","toast","fetchGiphy","fetch","then","response","json","data","catch","title","status","duration","isClosable","timer","setTimeout","clearTimeout","event","target","value","map","gif","embed_url","id"],"sources":["/home/gb/Bureau/soft-serverless-GabrielleWal/Netlify-App/src/App.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { Flex, Grid, Input, Text, useToast } from '@chakra-ui/react';\n\nconst API_KEY = \"Ba7btw1yauGPzzf7CIvrz1NcY9WwWGBN\";\n\ntype GifType = {\n\tid: string;\n\tembed_url: string;\n};\n\nconst GifCard = ({ URL }: { URL: string }): JSX.Element => <iframe title={URL} src={URL} allowFullScreen />;\n\nconst App = (): JSX.Element => {\n\tconst [input, setInput] = useState('');\n\tconst [gifs, setGifs] = useState<GifType[]>([]);\n\tconst toast = useToast();\n\n\tuseEffect(() => {\n\t\tconst fetchGiphy = () => {\n\t\t\tfetch(`https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${input}&limit=9&offset=0&rating=g&lang=en`)\n\t\t\t\t.then((response) => response.json())\n\t\t\t\t.then((data) => setGifs(data.data))\n\t\t\t\t.catch(() =>\n\t\t\t\t\ttoast({\n\t\t\t\t\t\ttitle: 'Please try again',\n\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\tduration: 3000,\n\t\t\t\t\t\tisClosable: true,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t};\n\n\t\tconst timer = setTimeout(() => {\n\t\t\tfetchGiphy();\n\t\t}, 700);\n\n\t\treturn () => {\n\t\t\tclearTimeout(timer);\n\t\t};\n\t}, [input, toast]);\n\n\treturn (\n\t\t<Flex direction=\"column\" align=\"center\" w=\"100%\" h=\"100%\" bg=\"black\">\n\t\t\t<Text\n\t\t\t\tmt=\"48px\"\n\t\t\t\tbgGradient=\"linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(193,176,15,1) 0%, rgba(0,212,255,1) 100%)\"\n\t\t\t\tbgClip=\"text\"\n\t\t\t\tfontWeight=\"extrabold\"\n\t\t\t\tfontSize=\"32px\"\n\t\t\t>\n\t\t\t\tServerless Gifs App\n\t\t\t</Text>\n\t\t\t<Input\n\t\t\t\tonChange={(event) => setInput(event.target.value)}\n\t\t\t\tvalue={input}\n\t\t\t\tmt=\"48px\"\n\t\t\t\tw=\"90%\"\n\t\t\t\tmaxW=\"600px\"\n\t\t\t\tcolor=\"white\"\n\t\t\t\tsize=\"lg\"\n\t\t\t\tfocusBorderColor=\"green.300\"\n\t\t\t\tplaceholder=\"search gifs\"\n\t\t\t/>\n\t\t\t<Grid mt=\"80px\" templateColumns=\"repeat(3, 1fr)\" gap={8}>\n\t\t\t\t{gifs.map((gif) => (\n\t\t\t\t\t<GifCard key={gif.id} URL={gif.embed_url} />\n\t\t\t\t))}\n\t\t\t</Grid>\n\t\t</Flex>\n\t);\n};\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAEC,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AAAC;AAErE,MAAMC,OAAO,GAAG,kCAAkC;AAOlD,MAAMC,OAAO,GAAG;EAAA,IAAC;IAAEC;EAAqB,CAAC;EAAA,oBAAkB;IAAQ,KAAK,EAAEA,GAAI;IAAC,GAAG,EAAEA,GAAI;IAAC,eAAe;EAAA;IAAA;IAAA;IAAA;EAAA,QAAG;AAAA;AAAC,KAAtGD,OAAO;AAEb,MAAME,GAAG,GAAG,MAAmB;EAAA;EAC9B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAY,EAAE,CAAC;EAC/C,MAAMc,KAAK,GAAGT,QAAQ,EAAE;EAExBN,SAAS,CAAC,MAAM;IACf,MAAMgB,UAAU,GAAG,MAAM;MACxBC,KAAK,CAAE,gDAA+CV,OAAQ,MAAKI,KAAM,oCAAmC,CAAC,CAC3GO,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKP,OAAO,CAACO,IAAI,CAACA,IAAI,CAAC,CAAC,CAClCC,KAAK,CAAC,MACNP,KAAK,CAAC;QACLQ,KAAK,EAAE,kBAAkB;QACzBC,MAAM,EAAE,OAAO;QACfC,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACb,CAAC,CAAC,CACF;IACH,CAAC;IAED,MAAMC,KAAK,GAAGC,UAAU,CAAC,MAAM;MAC9BZ,UAAU,EAAE;IACb,CAAC,EAAE,GAAG,CAAC;IAEP,OAAO,MAAM;MACZa,YAAY,CAACF,KAAK,CAAC;IACpB,CAAC;EACF,CAAC,EAAE,CAAChB,KAAK,EAAEI,KAAK,CAAC,CAAC;EAElB,oBACC,QAAC,IAAI;IAAC,SAAS,EAAC,QAAQ;IAAC,KAAK,EAAC,QAAQ;IAAC,CAAC,EAAC,MAAM;IAAC,CAAC,EAAC,MAAM;IAAC,EAAE,EAAC,OAAO;IAAA,wBACnE,QAAC,IAAI;MACJ,EAAE,EAAC,MAAM;MACT,UAAU,EAAC,0FAA0F;MACrG,MAAM,EAAC,MAAM;MACb,UAAU,EAAC,WAAW;MACtB,QAAQ,EAAC,MAAM;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAGT,eACP,QAAC,KAAK;MACL,QAAQ,EAAGe,KAAK,IAAKlB,QAAQ,CAACkB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAE;MAClD,KAAK,EAAErB,KAAM;MACb,EAAE,EAAC,MAAM;MACT,CAAC,EAAC,KAAK;MACP,IAAI,EAAC,OAAO;MACZ,KAAK,EAAC,OAAO;MACb,IAAI,EAAC,IAAI;MACT,gBAAgB,EAAC,WAAW;MAC5B,WAAW,EAAC;IAAa;MAAA;MAAA;MAAA;IAAA,QACxB,eACF,QAAC,IAAI;MAAC,EAAE,EAAC,MAAM;MAAC,eAAe,EAAC,gBAAgB;MAAC,GAAG,EAAE,CAAE;MAAA,UACtDE,IAAI,CAACoB,GAAG,CAAEC,GAAG,iBACb,QAAC,OAAO;QAAc,GAAG,EAAEA,GAAG,CAACC;MAAU,GAA3BD,GAAG,CAACE,EAAE;QAAA;QAAA;QAAA;MAAA,QACpB;IAAC;MAAA;MAAA;MAAA;IAAA,QACI;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAET,CAAC;AAAC,GA1DI1B,GAAG;EAAA,QAGMJ,QAAQ;AAAA;AAAA,MAHjBI,GAAG;AA4DT,eAAeA,GAAG;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module"}